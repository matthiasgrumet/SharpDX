<#@ include file="Header.tt" #>

namespace <#= Namespace.Name #> {

#pragma warning disable 282
#pragma warning disable 649
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574

<#
foreach (var sharpStruct in Namespace.Structs)
{
	ProcessStruct(sharpStruct);
}
#>
}
<#+
	public void ProcessStruct(CsStruct sharpStruct) {
#>
    
<#+	
	foreach (var docItem in sharpStruct.DocItems) {
#>
    /// <#= docItem #>	
<#+			
	}
	
	var packLayout = sharpStruct.Align != 0 ? ", Pack = " + sharpStruct.Align : string.Empty;
	if (!sharpStruct.HasMarshalType) {
		if (sharpStruct.ExplicitLayout) {#>
    [StructLayout(LayoutKind.Explicit<#= packLayout #>)]
<#+ 
		} else { 
#>
    [StructLayout(LayoutKind.Sequential<#= packLayout #>)]
<#+  
		} 
	}
#>
    <#= sharpStruct.VisibilityName #> partial <#= sharpStruct.StructTypeName #> <#= sharpStruct.Name #> {	
<#+	
	// Include Inner structure
	foreach (var innerStruct in sharpStruct.InnerStructs) {
		PushIndent("    ");
		ProcessStruct(innerStruct);			
		PopIndent();
	}
	
	// --------------------------------------------------------------------------------------------------
	// Handle Inner Constants
	// --------------------------------------------------------------------------------------------------
	foreach (var sharpConstant in sharpStruct.Variables) {		
#>        
        /// <summary>Constant <#= sharpConstant.Name #>.</summary>
        /// <unmanaged><#= sharpConstant.CppElementName #></unmanaged>
        <#= sharpConstant.VisibilityName #><#= sharpConstant.TypeName #> <#= sharpConstant.Name #> = <#= sharpConstant.Value #>;
<#+
	}

	
	// --------------------------------------------------------------------------------------------------
	// Process fields
	// --------------------------------------------------------------------------------------------------
	foreach (var sharpStructItem in sharpStruct.Fields) {				
#>
        
<#+	
		foreach (var docItem in sharpStructItem.DocItems) {
#>
        /// <#= docItem #>	
<#+			
		}
		if (sharpStructItem.IsBoolToInt && !sharpStructItem.IsArray) {
#>
        <#= sharpStructItem.VisibilityName #>bool <#= sharpStructItem.Name #> { 
            get { 
                return (_<#= sharpStructItem.Name #>!=0)?true:false; 
            }
            set { 
                _<#= sharpStructItem.Name #> = value?1:0;
            }
        }
<#+
			if (!sharpStruct.HasMarshalType  && sharpStruct.ExplicitLayout) {
#>
        [FieldOffset(<#= sharpStructItem.Offset #>)]
<#+			
			}		
#>        internal int _<#= sharpStructItem.Name #>;
<#+

			
		} else if (sharpStructItem.IsArray && sharpStructItem.PublicType.QualifiedName != "string") {
#>
        <#= sharpStructItem.VisibilityName #><#= sharpStructItem.PublicType.QualifiedName #>[] <#= sharpStructItem.Name #> { 
            get { return _<#= sharpStructItem.Name #> ?? (_<#= sharpStructItem.Name #> = new <#= sharpStructItem.PublicType.QualifiedName #>[<#= sharpStructItem.ArrayDimension #>]);}
        }
<#+			if (!sharpStruct.HasMarshalType  && sharpStruct.ExplicitLayout) {
#>
        [FieldOffset(<#= sharpStructItem.Offset #>)]
<#+			
			}		
#>        internal <#= sharpStructItem.PublicType.QualifiedName #>[] _<#= sharpStructItem.Name #>;
<#+
		} else {
			if (sharpStructItem.IsBitField) {
				// If bitMask == 1, then use bool
				if ( sharpStructItem.BitMask == 1 ) {
#>
        <#= sharpStructItem.VisibilityName #>bool  <#= sharpStructItem.Name #> { 
            get { 
                return 0 != ((_<#= sharpStructItem.Name #> >> <#= sharpStructItem.BitOffset #>)  &  <#= sharpStructItem.BitMask #>);
            }
            set { 
                _<#= sharpStructItem.Name #> = (<#= sharpStructItem.PublicType.QualifiedName #>)((_<#= sharpStructItem.Name #> & ~( <#= sharpStructItem.BitMask #> << <#= sharpStructItem.BitOffset #>)) | ( ( (value?1:0) & <#= sharpStructItem.BitMask #>) << <#= sharpStructItem.BitOffset #>));
            }
        }
        [FieldOffset(<#= sharpStructItem.Offset #>)]
        internal <#= sharpStructItem.PublicType.QualifiedName #> _<#= sharpStructItem.Name #>;
		
<#+				} else {
#>
        <#= sharpStructItem.VisibilityName #><#= sharpStructItem.PublicType.QualifiedName #>  <#= sharpStructItem.Name #> { 
            get { 
                return (<#= sharpStructItem.PublicType.QualifiedName #>)((_<#= sharpStructItem.Name #> >> <#= sharpStructItem.BitOffset #>)  &  <#= sharpStructItem.BitMask #>);
            }
            set { 
                _<#= sharpStructItem.Name #> = (<#= sharpStructItem.PublicType.QualifiedName #>)((_<#= sharpStructItem.Name #> & ~( <#= sharpStructItem.BitMask #> << <#= sharpStructItem.BitOffset #>)) | ( (value & <#= sharpStructItem.BitMask #>) << <#= sharpStructItem.BitOffset #>));
            }
        }
        [FieldOffset(<#= sharpStructItem.Offset #>)]
        internal <#= sharpStructItem.PublicType.QualifiedName #> _<#= sharpStructItem.Name #>;
		
<#+				}				
			} else {
				if (!sharpStruct.HasMarshalType  && sharpStruct.ExplicitLayout) {
#>
        [FieldOffset(<#= sharpStructItem.Offset #>)]
<#+			
				}	
#>
        <#= sharpStructItem.VisibilityName #><#= sharpStructItem.PublicType.QualifiedName #> <#= sharpStructItem.Name #>;
<#+
			}
		}
	}

	// Put Native internal struct
	if (sharpStruct.HasMarshalType && !sharpStruct.HasCustomMarshal) {
#>

        // Internal native struct used for marshalling
<#+
		if (sharpStruct.ExplicitLayout) {
#>
        [StructLayout(LayoutKind.Explicit<#= packLayout #>)]
<#+  
		} else { 
#>
        [StructLayout(LayoutKind.Sequential<#= packLayout #>)]
<#+ 
		} 			
#>
        internal partial struct __Native {	
<#+
	    foreach (var sharpStructItem in sharpStruct.Fields) {				
			var sharpStructItemAsStruct = sharpStructItem.PublicType as CsStruct;
			
			
		if (sharpStruct.ExplicitLayout) {
#>
            [FieldOffset(<#= sharpStructItem.Offset #>)]
<#+			
		}				
		    if (sharpStructItem.IsBoolToInt && !sharpStructItem.IsArray) {
#>
            public <#= sharpStructItem.MarshalType.QualifiedName #> _<#= sharpStructItem.Name #>;
<#+			
			} else  if (sharpStructItem.IsArray) {
#>
            public <#= sharpStructItem.MarshalType.QualifiedName #> <#= sharpStructItem.Name #>;
<#+
					for(int i = 1; i < sharpStructItem.ArrayDimensionValue; i++) {
		if (sharpStruct.ExplicitLayout) {
			int arrayItemOffset = sharpStructItem.Offset + (sharpStructItem.SizeOf / sharpStructItem.ArrayDimensionValue ) * i;
#>
            [FieldOffset(<#= arrayItemOffset #>)]
<#+			
		}
#>
            <#= sharpStructItem.MarshalType.QualifiedName #> __<#= sharpStructItem.Name #><#= i #>;
<#+
					}
		    } else if ( sharpStructItemAsStruct != null && sharpStructItemAsStruct.HasMarshalType) {
#>
            public <#= sharpStructItem.MarshalType.QualifiedName #>.__Native <#= sharpStructItem.Name #>;
<#+
		    } else {
#>
            public <#= sharpStructItem.MarshalType.QualifiedName #> <#= sharpStructItem.Name #>;
<#+
		    }
	    }

#>
		    // Method to free unmanaged allocation
            internal unsafe void __MarshalFree()
            {   
<#+	    	foreach (var sharpStructItem in sharpStruct.Fields) {			    
				var sharpStructItemAsStruct = sharpStructItem.PublicType as CsStruct;
				if (!sharpStructItem.IsArray) {
					if (sharpStructItem.PublicType.QualifiedName == "string") {
#>
                if (this.<#= sharpStructItem.Name #> != IntPtr.Zero)
                    Marshal.FreeHGlobal(this.<#= sharpStructItem.Name #>);		
<#+
		    		} else if ( sharpStructItemAsStruct != null && sharpStructItemAsStruct.HasMarshalType) {
#>
                this.<#= sharpStructItem.Name #>.__MarshalFree();
<#+
	    			}
				}
			}#>
            }
        }
		
		// Method to free unmanaged allocation
        internal unsafe void __MarshalFree(ref __Native @ref)
        {   
            @ref.__MarshalFree();
        }
		
		// Method to marshal from native to managed struct
        internal unsafe void __MarshalFrom(ref __Native @ref)
        {            
<#+
		// Write code for Marshal from native struct
	    foreach (var sharpStructItem in sharpStruct.Fields) {	
			var sharpStructItemAsStruct = sharpStructItem.PublicType as CsStruct;
			
		    if (sharpStructItem.IsBoolToInt) {
				if (sharpStructItem.IsArray) {
#>            fixed (int* __from = &@ref.<#= sharpStructItem.Name #>) this._<#= sharpStructItem.Name #> = <#= Global.Name #>.Utilities.ConvertToBoolArray(__from, <#= sharpStructItem.ArrayDimension #>);
<#+				} else {
#>			this._<#= sharpStructItem.Name #> = @ref._<#= sharpStructItem.Name #>;
<#+				}
			} else  if (sharpStructItem.IsArray) {
				if (sharpStructItem.IsFixedArrayOfStruct) {
#>
            fixed (void* __to = &this.<#= sharpStructItem.Name #>[0]) fixed (void* __from = &@ref.<#= sharpStructItem.Name #>) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, <#= sharpStructItem.ArrayDimension #>*sizeof ( <#= sharpStructItem.MarshalType.QualifiedName #>));
<#+
				} else {
					if (sharpStructItem.MarshalType.QualifiedName == "char") {
#>
            fixed (char* __ptr = &@ref.<#= sharpStructItem.Name #>) this.<#= sharpStructItem.Name #> = SharpDX.Utilities.PtrToStringUni((IntPtr)__ptr, <#= sharpStructItem.ArrayDimension #>);
<#+
					} else if (sharpStructItem.PublicType.QualifiedName == "string" && sharpStructItem.MarshalType.QualifiedName == "byte") {
#>
            fixed (void* __ptr = &@ref.<#= sharpStructItem.Name #>) this.<#= sharpStructItem.Name #> = SharpDX.Utilities.PtrToStringAnsi((IntPtr)__ptr, <#= sharpStructItem.ArrayDimension #>);
<#+
					} else {
#>
            fixed (void* __to = &this.<#= sharpStructItem.Name #>[0]) fixed (void* __from = &@ref.<#= sharpStructItem.Name #>) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, <#= sharpStructItem.ArrayDimension #>*sizeof ( <#= sharpStructItem.MarshalType.QualifiedName #>));
<#+
					}
				}
		    } else {
					if (sharpStructItem.PublicType.QualifiedName == "string") {
						if (!sharpStructItem.IsWideChar) {
				// Copy string
#>
            this.<#= sharpStructItem.Name #> = ( @ref.<#= sharpStructItem.Name #> == IntPtr.Zero )?null:Marshal.PtrToStringAnsi(@ref.<#= sharpStructItem.Name #>);
<#+
						} else {
#>
            this.<#= sharpStructItem.Name #> = ( @ref.<#= sharpStructItem.Name #> == IntPtr.Zero )?null:Marshal.PtrToStringUni(@ref.<#= sharpStructItem.Name #>);
<#+
						}						
					} else if ( sharpStructItemAsStruct != null && sharpStructItemAsStruct.HasMarshalType) {
#>
            this.<#= sharpStructItem.Name #> = new <#= sharpStructItem.PublicType.QualifiedName #>();
			this.<#= sharpStructItem.Name #>.__MarshalFrom(ref @ref.<#= sharpStructItem.Name #>);
<#+
		    		} else {
				// Copy Default fields
#>
            this.<#= sharpStructItem.Name #> = @ref.<#= sharpStructItem.Name #>;
<#+
					}
		    }
	    }
#>
        }
<#+
		if (sharpStruct.IsOut) {
#>
        // Method to marshal from managed struct tot native
        internal unsafe void __MarshalTo(ref __Native @ref)
        {
<#+
		// Write code for Marshal to native struct
	    foreach (var sharpStructItem in sharpStruct.Fields) {				
			var sharpStructItemAsStruct = sharpStructItem.PublicType as CsStruct;
		
		    if (sharpStructItem.IsBoolToInt) {
				if (sharpStructItem.IsArray) {
#>            fixed (int* __from = &@ref.<#= sharpStructItem.Name #>) <#= Global.Name #>.Utilities.ConvertToIntArray(this.<#= sharpStructItem.Name #>, __from);
<#+				} else {
#>            @ref._<#= sharpStructItem.Name #> = this._<#= sharpStructItem.Name #>;
<#+				}
			} else  if (sharpStructItem.IsArray) {
				if (sharpStructItem.IsFixedArrayOfStruct) {
#>
            fixed (void* __to = &@ref.<#= sharpStructItem.Name #>) fixed (void* __from = &this.<#= sharpStructItem.Name #>[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, <#= sharpStructItem.ArrayDimension #>*sizeof ( <#= sharpStructItem.MarshalType.QualifiedName #>));
<#+
				} else {
					if (sharpStructItem.MarshalType.QualifiedName == "char") {
#>
            fixed (char* __psrc = this.<#= sharpStructItem.Name #>) fixed (char* __ptr = &@ref.<#= sharpStructItem.Name #>) Utilities.CopyMemory((IntPtr)__ptr, (IntPtr)__psrc, <#= sharpStructItem.Name #>.Length * 2);
<#+
					} else if (sharpStructItem.PublicType.QualifiedName == "string") {
#>
            IntPtr <#= sharpStructItem.Name #>_ = Utilities.StringToHGlobalAnsi(this.<#= sharpStructItem.Name #>);
            fixed (void* __ptr = &@ref.<#= sharpStructItem.Name #>) Utilities.CopyMemory((IntPtr)__ptr, <#= sharpStructItem.Name #>_, this.<#= sharpStructItem.Name #>.Length);
            Marshal.FreeHGlobal( <#= sharpStructItem.Name #>_);
<#+
					} else {
#>
            fixed (void* __to = &@ref.<#= sharpStructItem.Name #>) fixed (void* __from = &this.<#= sharpStructItem.Name #>[0]) SharpDX.Utilities.CopyMemory((IntPtr) __to, (IntPtr) __from, <#= sharpStructItem.ArrayDimension #>*sizeof ( <#= sharpStructItem.MarshalType.QualifiedName #>));
<#+
					}
				}
		    } else {
					if (sharpStructItem.PublicType.QualifiedName == "string") {
						if (!sharpStructItem.IsWideChar) {
				// Copy string
#>
            @ref.<#= sharpStructItem.Name #> = ( this.<#= sharpStructItem.Name #> == null )?IntPtr.Zero : Utilities.StringToHGlobalAnsi(this.<#= sharpStructItem.Name #>);
<#+
						} else {
#>
            @ref.<#= sharpStructItem.Name #> = ( this.<#= sharpStructItem.Name #> == null )?IntPtr.Zero : Utilities.StringToHGlobalUni(this.<#= sharpStructItem.Name #>);
<#+
						}							
					} else if ( sharpStructItemAsStruct != null && sharpStructItemAsStruct.HasMarshalType) {
#>
			@ref.<#= sharpStructItem.Name #> = <#= sharpStructItemAsStruct.GetConstructor() #>;
<#+
						if (sharpStructItemAsStruct.GenerateAsClass) {
#>						
						if (this.<#= sharpStructItem.Name #> != null) <#+
						}
#>						
                this.<#= sharpStructItem.Name #>.__MarshalTo(ref @ref.<#= sharpStructItem.Name #>);
<#+
		    		} else {
				// Copy Default fields
#>
            @ref.<#= sharpStructItem.Name #> = this.<#= sharpStructItem.Name #>;
<#+
					}
		    }
	    } // Foreach sharpStructItem in sharpStruct.Fields
#>		
		}
<#+
		} // Endif sharpStruct.IsOut
    }
#>
    }
<#+
}
#>
