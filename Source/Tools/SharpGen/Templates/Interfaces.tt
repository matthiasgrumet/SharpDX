<#@ include file="Header.tt" #>

namespace <#= Namespace.Name #> {

// Disable warning : XML comment is not placed on a valid language element
#pragma warning disable 419
#pragma warning disable 1587
#pragma warning disable 1574

<#
foreach (var sharpInterface in Namespace.Interfaces)
{
	ProcessInterface(sharpInterface);
}
#>
}
<#+
	public void ProcessInterface(CsInterface sharpInterface) {
#>

<#+	

	if (sharpInterface.Parent is CsInterface) {
#>    /// <summary>Interface <#= sharpInterface.Name #>.</summary>
    /// <unmanaged><#= sharpInterface.DocUnmanagedName #></unmanaged>
<#+
	} else {
		foreach (var docItem in sharpInterface.DocItems) {
#>
    /// <#= docItem #>	
<#+			
		}
	}

	if (sharpInterface.Guid != null) {
#>
    [Guid("<#= sharpInterface.Guid #>")]
<#+	
	}
	
	// If Callback, then declare as interface
	if (sharpInterface.IsCallback) {
#>    <#= sharpInterface.VisibilityName #>partial interface <#= sharpInterface.Name #><#+	
	} else {
#>    <#= sharpInterface.VisibilityName #>partial class <#= sharpInterface.Name #><#+	
	}
	
	// Is there any Base class?
	if (sharpInterface.Base != null || sharpInterface.IBase != null) {
#> : <#+	
		string separator = "";
		if (sharpInterface.Base != null) {
#><#= sharpInterface.Base.QualifiedName #><#+
			separator = ", ";
		}		
		if (sharpInterface.IBase != null) {
#><#= separator #><#= sharpInterface.IBase.QualifiedName #><#+
		}
	}
#> {
<#+
	if (!sharpInterface.IsCallback) {#>
        /// <summary>
        /// Initializes a new instance of the <see cref="<#= sharpInterface.QualifiedName #>"/> class.
        /// </summary>
        /// <param name="nativePtr">The native pointer.</param>	
        public <#= sharpInterface.Name #>(IntPtr nativePtr) : base(nativePtr) {
        }

		/// <summary>
		/// Performs an explicit conversion from <see cref="System.IntPtr"/> to <see cref="<#= sharpInterface.QualifiedName #>"/>. (This method is a shortcut to <see cref="SharpDX.CppObject.NativePointer"/>) 
		/// </summary>
		/// <param name="nativePointer">The native pointer.</param>
		/// <returns>
		/// The result of the conversion.
		/// </returns>
		public static explicit operator <#= sharpInterface.QualifiedName #>(IntPtr nativePointer)
		{
			return nativePointer == IntPtr.Zero ? null : new <#= sharpInterface.QualifiedName #>(nativePointer);
		}
<#+
	}
#>
        
<#+

	// --------------------------------------------------------------------------------------------------
	// Handle Inner Constants
	// --------------------------------------------------------------------------------------------------
	foreach (var sharpConstant in sharpInterface.Variables) {		
#>        
        /// <summary>Constant <#= sharpConstant.Name #>.</summary>
        /// <unmanaged><#= sharpConstant.CppElementName #></unmanaged>
        <#= sharpConstant.VisibilityName #><#= sharpConstant.TypeName #> <#= sharpConstant.Name #> = <#= sharpConstant.Value #>;
<#+
	}
	
	// --------------------------------------------------------------------------------------------------
	// Handle Inner Interfaces
	// --------------------------------------------------------------------------------------------------
	if (sharpInterface.HasInnerInterfaces) {
	
#>				
        /// <summary>Update nested inner interfaces pointer</summary>
        protected override void NativePointerUpdated(IntPtr oldPointer)
        {            
            base.NativePointerUpdated(oldPointer);
<#+
		// Include Inner structure
		foreach (var innerInterface in sharpInterface.InnerInterfaces) {
#>            if (<#= innerInterface.PropertyAccesName #> == null) 
                <#= innerInterface.PropertyAccesName #> = new <#= innerInterface.QualifiedName #>(IntPtr.Zero);
            <#= innerInterface.PropertyAccesName #>.NativePointer = NativePointer;
<#+		
		}
#>        }
<#+
		
		// Include Inner structure
		foreach (var innerInterface in sharpInterface.InnerInterfaces) {
#>      
		/// <summary>Inner interface giving access to <#= innerInterface.Name #> methods. </summary>
        public <#= innerInterface.Name #> <#= innerInterface.PropertyAccesName #> { get; private set; }		
<#+		
			//PushIndent("    ");		
			//ProcessInterface(innerInterface);			
			//PopIndent();
		}
	}
	
	// ------------------------------------------------------------------------------------------------------------
	// Output Properties
	// ------------------------------------------------------------------------------------------------------------
	if (!sharpInterface.IsCallback)
	foreach (var sharpProperty in sharpInterface.Properties) {				
#>
        
<#+	
		foreach (var docItem in sharpProperty.DocItems) {
#>
        /// <#= docItem #>	
<#+			
		}		
#>
        /// <unmanaged><#= sharpProperty.CppSignature #></unmanaged>
        <#= sharpProperty.VisibilityName #><#= sharpProperty.PublicType.QualifiedName #> <#= sharpProperty.Name #> {
<#+		if (sharpProperty.IsPropertyParam) {
			if (sharpProperty.Getter != null) {
				if (sharpProperty.IsPersistent) {
#>
                get { if (<#= sharpProperty.Name #>__ == null)  <#= sharpProperty.Getter.Name #>(out <#= sharpProperty.Name #>__); return <#= sharpProperty.Name #>__; }
<#+		
				} else {
#>
                get { <#= sharpProperty.PublicType.QualifiedName #> __output__; <#= sharpProperty.Getter.Name #>(out __output__); return __output__; }
<#+		
				}
			}
			if (sharpProperty.Setter != null) {
#>
                set { <#= sharpProperty.Setter.Name #>(<#= sharpProperty.PrefixSetterParam #>value); }
<#+		
			}
		} else {
			if (sharpProperty.Getter != null) {			
				if (sharpProperty.IsPersistent) {
#>
                get { return <#= sharpProperty.Name #>__ ?? <#= sharpProperty.Name #>__ = <#= sharpProperty.Getter.Name #>(); }
<#+		
				} else {
#>
                get { return <#= sharpProperty.Getter.Name #>(); }
<#+		
				}
			}
			if (sharpProperty.Setter != null) {
#>
                set { <#= sharpProperty.Setter.Name #>(<#= sharpProperty.PrefixSetterParam #>value); }
<#+		
			}
		}
#>        }
<#+	
		if (sharpProperty.IsPropertyParam && sharpProperty.IsPersistent) {
#>
			protected internal <#= sharpProperty.PublicType.QualifiedName #> <#= sharpProperty.Name #>__;
<#+		
		}
	}
		
	// ------------------------------------------------------------------------------------------------------------
	// Output methods
	// ------------------------------------------------------------------------------------------------------------
	foreach (var sharpInterfaceMethod in sharpInterface.Methods) {
		if (sharpInterface.IsCallback)
			sharpInterfaceMethod.Hidden = true;
		ProcessMethod(sharpInterfaceMethod);
	}
#>
    }
<#+
    } // End of ProcessInterface
#>
<#@ include file="Method.tt" #>